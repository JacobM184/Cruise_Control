%Top Level Module
module cruiseControl:

%Pedal Interface
input Accel1 := 0.0f: float;
input Brake1 := 0.0f: float;

output accelPressed1;
output brakePressed1;

%Speed Monitor Interface
input Speed1 := 0.0f :float;
output speedWarning1;
output warningType1 :=0 : integer;

%FSM Interface
input On1;
input Off1;
input Resume1;
output CruiseState1:integer;

%CruiseSpeed Interface
input Set1;
input QuickAccel1;
input QuickDecel1;
output CruiseSpeed1 := 0.0f:float;

%Cruise Regulation Interface
output ThrottleCmd1 := 0.0f:float;

run pedal[  
    signal Accel1/Accel;
    signal Brake1/Brake;
    signal CruiseState1/CruiseState;
    signal ThrottleCmd1/ThrottleCmd;
    signal accelPressed1/accelPressed;
    signal brakePressed1/brakePressed]

||

run speedMonitor[  
    signal Speed1/Speed;
    signal speedWarning1/speedWarning;
    signal warningType1/warningType
]

||

run FSM[
    signal On1/On;
    signal Off1/Off;
    signal Resume1/Resume;
    signal accelPressed1/accelPressed;
    signal speedWarning1/speedWarning;
    signal brakePressed1/brakePressed;
    signal CruiseState1/CruiseState
]

||

run cruiseSpeed[
    signal On1/On;
    signal Set1/Set;
    signal Speed1/Speed;
    signal QuickAccel1/QuickAccel;
    signal QuickDecel1/QuickDecel;
    signal warningType1/warningType;
    signal CruiseState1/CruiseState;
    signal CruiseSpeed1/CruiseSpeed
]

||

run cruiseRegulation[
    signal CruiseState1/CruiseState;
    signal Speed1/Speed;
    signal CruiseSpeed1/CruiseSpeed;
    signal Accel1/Accel;
    signal ThrottleCmd1/ThrottleCmd
]

end module

%-----------------------------------------------------------------------------------------------------

%Pedal Module 
%Checks if a pedal is considered to be pressed 
module pedal:

%Pedal Threshold
constant pedalsMin = 3.0f        : float;

%Pedal Interface declarations
input Accel         : float;
input Brake         : float;
input CruiseState   : integer;
input ThrottleCmd   : float;

output accelPressed;
output brakePressed;

loop
    pause;
    if pre(?CruiseState) = 2 then 

        if pre(?ThrottleCmd) > pedalsMin then
            emit accelPressed;

        elsif ?Brake > pedalsMin then
            emit brakePressed;

        end if;
    else
        if ?Accel > pedalsMin then
            emit accelPressed;

        elsif ?Brake > pedalsMin then
            emit brakePressed;

        end if;
    end if;

end loop
end module

%-----------------------------------------------------------------------------------------------------

%Speed Monitor Module
module speedMonitor:
constant speedMin = 30.0f       : float;
constant speedMax = 150.0f      : float;

input Speed         :float;

output speedWarning;
output warningType : integer;

var warning := 0 : integer in
    loop
        await Speed;

        %Below lower speed threshold
        if ?Speed < speedMin then
            warning := 1;
            
        %Above higher speed threshold
        elsif ?Speed > speedMax then
            warning := 2;
        else
            warning := 0;
        end if;
        
        if (warning > 0) then
            emit speedWarning;
        end if;

        emit warningType(warning)

    end loop
end var;
end module

%-----------------------------------------------------------------------------------------------------

module cruiseSpeed:

    %module interface
    input On;
    input Set;
    input Speed : float;
    input QuickAccel;
    input QuickDecel;    
    input warningType: integer;
    input CruiseState: integer;

    output CruiseSpeed : float;

    %constant declaration
    constant speedMin = 30.0f      : float;
    constant speedMax = 150.0f      : float;
    constant SpeedInc = 2.5f        : float;

	loop
		pause;
		if ?CruiseState = 2 then
			if ?warningType = 1 then
				emit CruiseSpeed(speedMin);
			elsif ?warningType = 2 then
				emit CruiseSpeed(speedMax);
			else
				emit CruiseSpeed(?Speed);
			end if;
			trap T in
				loop
					pause;

					%Cruise Control not managed in OFF state
					if ?CruiseState = 1 then
						exit T;
					end if; 

					%Set Cruise Speed to current speed

					present Set then
						if ?warningType = 1 then
							emit CruiseSpeed(speedMin);
						elsif ?warningType = 2 then
							emit CruiseSpeed(speedMax);
						else
							emit CruiseSpeed(?Speed);
						end if;
					end present;

					present QuickAccel then
						if (pre(?CruiseSpeed) + SpeedInc) > speedMax then
							emit CruiseSpeed(speedMax);
						else
							emit CruiseSpeed(pre(?CruiseSpeed) + SpeedInc);
						end if; 
					end present;

					present QuickDecel then
						if (pre(?CruiseSpeed) - SpeedInc) < speedMin then
							emit CruiseSpeed(speedMin);
						else
							emit CruiseSpeed(pre(?CruiseSpeed) - SpeedInc);
						end if; 
					end present;

				end loop

			end trap
		end if
	end loop

end module

%-----------------------------------------------------------------------------------------------------
module cruiseRegulation:

%interface declarations
input CruiseState : integer;
input Speed: float;
input Accel : float;
input CruiseSpeed : float;

output ThrottleCmd :float;

%function call
function regulateThrottle(boolean,float,float) : float;

var vroom := 0.0f : float, firstTime := 1 : integer in
    loop
        pause;
        if ?CruiseState = 2 then
            if firstTime = 1 then
                vroom := regulateThrottle(true, ?CruiseSpeed, ?Speed);
                firstTime := 0;
                emit ThrottleCmd(vroom);
            else
                vroom := regulateThrottle(false, ?CruiseSpeed, ?Speed);
                emit ThrottleCmd(vroom);
            end if;
        else
            emit ThrottleCmd(?Accel);
            firstTime := 1;
        end if;
            
    end loop;
end var

end module

%-----------------------------------------------------------------------------------------------------

%FSM Module
%state 1 = off, state 2 = on, state 3 = stdby, state 4 = disable

module FSM:
    input On;
    input Off;
    input Resume;
    input accelPressed;
    input speedWarning;
    input brakePressed;

    output CruiseState : integer;

    emit CruiseState(1);

    var state := 1 : integer in
        loop
            pause;
                present

                    % case any state to Off
                    case [Off] do
                        state := 1;
                        emit CruiseState(state);

                    % case Off to On
                    case [On] do 
                        if state = 1 then
                            state := 2;
                            emit CruiseState(state);
                        end if
                    
                    % case Standby to On
                    case [Resume and not accelPressed and not speedWarning] do
                        if state = 3 then
                            state := 2;
                            emit CruiseState(state);
                        end if

                    % case Standby to Disable
                    case [Resume and (accelPressed or speedWarning)] do
                        if state = 3 then
                            state := 4;
                            emit CruiseState(state);
                        end if

                    % case On to Standby
                    case [brakePressed] do
                        if state = 2 then
                            state := 3;
                            emit CruiseState(state);
                        end if

                    % case Disable to On
                    case [not accelPressed and not speedWarning] do
                        if state = 4 then
                            state := 2;
                            emit CruiseState(state);
                        end if

                    % case On to Disable
                    case [accelPressed or speedWarning] do
                        if state = 2 then
                            state := 4;
                            emit CruiseState(state);
                        end if
                        
                    end present
        end loop
        end var
end module